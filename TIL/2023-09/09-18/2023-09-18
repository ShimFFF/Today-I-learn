# TIL : [Git/ Git Flow 프로젝트에 적용하기]

> Velog - [[Git] 브랜치 전략: Git Flow](https://velog.io/@ssw123Git-%EA%B9%83-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%A0%84%EB%9E%B5-Git-Flow)


오늘은 현재 진행하고 있는 프로젝트 리뉴얼을 준비하면서 브랜치 관리 방식을 바꾸기로 했다. 아직 출시가 되지 않았고 기능, 레이아웃 수정이 주를 이루기에 GitHub Flow 보다는 Git Flow를 채택했다.

이에 따라 Git Flow의 흐름, 각 브랜치의 역할에 대해 공부했다.

## Git Flow 적용 이유
현재 진행 중인 프로젝트에서 Git Flow를 선택한 이유는 다음과 같디:

**프로젝트의 특성과 일관성 유지**: 프로젝트가 출시되지 않았으며, 기능 추가와 레이아웃 수정이 중점이므로 Git Flow를 통해 일관된 방식으로 브랜치를 관리하고 변경사항을 통합할 수 있다.

**안정적인 개발 환경 유지**: Git Flow를 사용하면 각 브랜치의 역할이 명확하게 정의되어 안정적인 개발 환경을 유지할 수 있다. 개발자들은 해당 역할에 맞는 브랜치에서 작업하며, 안전하게 코드를 통합할 수 있다.

**프로젝트 확장성 고려**: 미래에 더 복잡한 기능이나 다양한 버전 관리가 필요할 수 있으므로, 미리 Git Flow를 적용하여 프로젝트의 확장성을 고려하고자 했다.

## 공부한 내용
오늘 공부한 내용은 다음과 같습니다:

**Git Flow의 기본 흐름**: `master`, `develop`, `feature`, `release`, `hotfix` 브랜치를 활용한 Git Flow 전략에 대해 학습

**각 브랜치의 역할**: 각 브랜치가 어떤 역할을 하는지에 대해 이해하고, 언제 어떤 브랜치를 사용해야 하는지에 대해 학습

## 앞으로의 계획
Git을 이용한 협업에 아직은 미숙함을 느꼈다. 따라서 앞으로는 Git에 대한 공부를 더 진행하고, 프로젝트 협업에서 Git을 효과적으로 활용하기 위한 포스팅 및 개인 정리를 시간을 내어 진행할 계획이다.
